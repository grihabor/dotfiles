#!/usr/bin/env python3.11

from __future__ import annotations

from dataclasses import dataclass
import argparse
import logging
import random
import shlex
import string
import subprocess as sp

logger = logging.getLogger(__name__)


@dataclass
class Commit:
    hash: str
    message: str


def main():
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--onto", required=True)
    parser.add_argument("-b", "--branch", default="HEAD")
    parser.add_argument("--shell", default="/bin/bash")

    args = parser.parse_args()

    merge_base = git_merge_base(args.onto, args.branch)
    apply_commits = git_log(start=merge_base, stop=args.branch)

    replay_branch = "replay-" + "".join(random.choices(string.hexdigits, k=4))
    sp.check_call(["git", "checkout", "-b", replay_branch, args.onto])

    for commit in apply_commits:
        command = [args.shell, "-c", commit.message]
        logger.info("running: %s", shlex.join(command))
        try:
            sp.check_call(command)
        except sp.CalledProcessError:
            cherry_pick = ["git", "cherry-pick", commit.hash]
            logger.info("running: %s", shlex.join(cherry_pick))
            sp.check_call(cherry_pick)
            continue

        sp.check_call(["git", "add", "."])
        sp.check_call(["git", "commit", "--allow-empty", "-m", commit.message])


def git_log(start: str, stop: str) -> list[Commit]:
    command = shlex.split(f"git log --format=%H%x00%B%x00 {start}..{stop}")

    it = iter(sp.check_output(command).split(b"\0"))
    commits = []
    try:
        while True:
            hash = next(it)
            message = next(it)
            commits.append(
                Commit(
                    hash=hash.decode("utf-8").strip(),
                    message=message.decode("utf-8").strip(),
                )
            )
    except StopIteration:
        pass

    return reversed(commits)


def git_merge_base(left: str, right: str) -> str:
    command = ["git", "merge-base", left, right]
    return sp.check_output(command).decode("utf-8").strip()


if __name__ == "__main__":
    main()
